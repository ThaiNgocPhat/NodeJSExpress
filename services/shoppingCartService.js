import { dbQuery } from "../config/queryAsync.js";
import db from "../config/db.js";
import { v4 as uuidv4 } from 'uuid';
class ShoppingCartService {
    async getListCart(user) {
        // L·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
        const carts = await dbQuery(
            `SELECT 
                sc.shopping_cart_id, sc.order_quantity, sc.total_price, 
                p.product_name, p.unit_price, p.image 
            FROM shopping_cart sc
            JOIN products p ON sc.product_id = p.product_id
            WHERE sc.user_id = ?`, 
            [user.user_id]
        );

        if (carts.length === 0) {
            return {
                code: 200,
                message: "Gi·ªè h√†ng tr·ªëng",
                data: []
            };
        }

        return {
            code: 200,
            message: "L·∫•y danh s√°ch gi·ªè h√†ng th√†nh c√¥ng",
            data: carts
        };
    }

    async addToCart(user, productId, quantity) {
        if (!user || !user.user_id) {
            throw {
                code: 401,
                status: "UNAUTHORIZED",
                message: "Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token kh√¥ng h·ª£p l·ªá"
            };
        }

        // L·∫•y th√¥ng tin s·∫£n ph·∫©m
        const existingProduct = await dbQuery(
            `SELECT * FROM products WHERE product_id = ?`, 
            [productId]
        );

        if (existingProduct.length === 0) {
            throw {
                code: 404,
                status: "NOT_FOUND",
                message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i"
            };
        }

        const product = existingProduct[0];

        // Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªìn kho
        if (product.stock < quantity) {
            throw {
                code: 400,
                status: "BAD_REQUEST",
                message: `S·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong kho kh√¥ng ƒë·ªß. Hi·ªán c√≤n ${product.stock} s·∫£n ph·∫©m`
            };
        }

        // T√≠nh t·ªïng ti·ªÅn
        const totalPrice = product.unit_price * quantity;

        // Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
        const existingCartItem = await dbQuery(
            `SELECT * FROM shopping_cart WHERE user_id = ? AND product_id = ?`, 
            [user.user_id, productId]
        );

        if (existingCartItem.length > 0) {
            // N·∫øu ƒë√£ c√≥ trong gi·ªè h√†ng, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng + t·ªïng ti·ªÅn m·ªõi
            const newQuantity = existingCartItem[0].order_quantity + quantity;
            const newTotalPrice = newQuantity * product.unit_price;

            await dbQuery(
                `UPDATE shopping_cart 
                 SET order_quantity = ?, total_price = ? 
                 WHERE user_id = ? AND product_id = ?`, 
                [newQuantity, newTotalPrice, user.user_id, productId]
            );
        } else {
            const cartId = uuidv4();
            await dbQuery(
                `INSERT INTO shopping_cart (shopping_cart_id, user_id, product_id, order_quantity, total_price) 
                 VALUES (?, ?, ?, ?, ?)`, 
                [cartId, user.user_id, productId, quantity, totalPrice]
            );
        }

        return {
            code: 201,
            status: "CREATED",
            message: "Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng th√†nh c√¥ng",
            data: {
                product_name: product.product_name,
                order_quantity: quantity,
                unit_price: product.unit_price,
                total_price: totalPrice
            }
        };
    }

    async changeOrderQuantity(user, shoppingCartId, quantity) {
        // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ trong gi·ªè h√†ng hay kh√¥ng
        const existingItem = await dbQuery(
            `SELECT * FROM shopping_cart WHERE shopping_cart_id = ?`, 
            [shoppingCartId]
        );
    
        if (existingItem.length === 0) {
            throw {
                code: 404,
                status: "NOT_FOUND",
                message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p"
            };
        }
    
        // L·∫•y th√¥ng tin s·∫£n ph·∫©m ƒë·ªÉ ki·ªÉm tra t·ªìn kho
        const product = await dbQuery(
            `SELECT stock, unit_price FROM products WHERE product_id = ?`, 
            [existingItem[0].product_id]
        );
    
        if (product.length === 0) {
            throw {
                code: 404,
                status: "NOT_FOUND",
                message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m"
            };
        }
    
        // Ki·ªÉm tra t·ªìn kho
        if (quantity > product[0].stock) {
            throw {
                code: 400,
                status: "BAD_REQUEST",
                message: `Kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng trong kho, hi·ªán c√≤n ${product[0].stock} s·∫£n ph·∫©m`
            };
        }
    
        // T√≠nh t·ªïng ti·ªÅn m·ªõi
        const totalPrice = product[0].unit_price * quantity;
    
        // C·∫≠p nh·∫≠t gi·ªè h√†ng
        await dbQuery(
            `UPDATE shopping_cart 
             SET order_quantity = ?, total_price = ? 
             WHERE shopping_cart_id = ? AND user_id = ?`, 
            [quantity, totalPrice, shoppingCartId, user.user_id]
        );
    
        return {
            code: 200,
            status: "OK",
            message: "C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng th√†nh c√¥ng",
            data: {
                shopping_cart_id: shoppingCartId,
                order_quantity: quantity,
                total_price: totalPrice
            }
        };
    }    

    async deleteOneProduct(user, shoppingCartId) {
        try {
            // Ki·ªÉm tra tham s·ªë h·ª£p l·ªá
            if (!shoppingCartId) {
                return {
                    code: 400,
                    status: "BAD_REQUEST",
                    message: "Thi·∫øu shoppingCartId"
                };
            }
    
            if (!user || !user.user_id) {
                return {
                    code: 401,
                    status: "UNAUTHORIZED",
                    message: "Unauthorized - Kh√¥ng t√¨m th·∫•y user"
                };
            }

            const existingItem = await dbQuery(
                `SELECT * FROM shopping_cart WHERE shopping_cart_id = ? AND user_id = ?`, 
                [shoppingCartId, user.user_id]
            );
    
            // N·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m, tr·∫£ v·ªÅ l·ªói 404
            if (existingItem.length === 0) {
                return {
                    code: 404,
                    status: "NOT_FOUND",
                    message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p ho·∫∑c ƒë√£ b·ªã x√≥a tr∆∞·ªõc ƒë√≥"
                };
            }
    
            const { product_id, order_quantity } = existingItem[0];
    
            // C·∫≠p nh·∫≠t l·∫°i stock trong b·∫£ng products
            await dbQuery(
                `UPDATE products SET stock = stock + ? WHERE product_id = ?`,
                [order_quantity, product_id]
            );
    
            // Xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
            await dbQuery(
                `DELETE FROM shopping_cart WHERE shopping_cart_id = ? AND user_id = ?`, 
                [shoppingCartId, user.user_id]
            );
    
            return {
                code: 200,
                status: "OK",
                message: "X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng th√†nh c√¥ng",
                data: {
                    shopping_cart_id: shoppingCartId,
                    restored_stock: order_quantity
                }
            };
        } catch (error) {
            return {
                code: 500,
                status: "SERVER_ERROR",
                message: "L·ªói Server",
                error: error.message || error
            };
        }
    }    

    async clearCart(user){
        // L·∫•y danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng c·ªßa user
        const cartItems = await dbQuery(
            `SELECT product_id, order_quantity FROM shopping_cart WHERE user_id = ?`, 
            [user.user_id]
        );

        // N·∫øu gi·ªè h√†ng tr·ªëng, tr·∫£ v·ªÅ l·ªói 404
        if (cartItems.length === 0) {
            return {
                code: 404,
                status: "NOT_FOUND",
                message: "Gi·ªè h√†ng tr·ªëng, kh√¥ng c√≥ g√¨ ƒë·ªÉ x√≥a"
            };
        }

        // C·∫≠p nh·∫≠t l·∫°i stock trong b·∫£ng products
        for (const item of cartItems) {
            await dbQuery(
                `UPDATE products SET stock = stock + ? WHERE product_id = ?`,
                [item.order_quantity, item.product_id]
            );
        }

        // X√≥a to√†n b·ªô gi·ªè h√†ng c·ªßa user
        await dbQuery(`DELETE FROM shopping_cart WHERE user_id = ?`, [user.user_id]);

        return {
            code: 200,
            status: "OK",
            message: "X√≥a to√†n b·ªô gi·ªè h√†ng th√†nh c√¥ng"
        };
    }

    async checkout(user, request) {
        try {
            console.log("üìå B·∫Øt ƒë·∫ßu ƒë·∫∑t h√†ng:", { user_id: user?.user_id });

            if (!user || !user.user_id) {
                throw {
                    code: 401,
                    status: "UNAUTHORIZED",
                    message: "Unauthorized - Kh√¥ng t√¨m th·∫•y user"
                };
            }

            // 1Ô∏è‚É£ L·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
            const cartItems = await dbQuery(
                `SELECT sc.product_id, sc.order_quantity, sc.total_price, 
                        p.product_name, p.unit_price, p.stock 
                FROM shopping_cart sc 
                JOIN products p ON sc.product_id = p.product_id 
                WHERE sc.user_id = ?`,
                [user.user_id]
            );

            if (cartItems.length === 0) {
                throw {
                    code: 404,
                    status: "NOT_FOUND",
                    message: "Gi·ªè h√†ng tr·ªëng, kh√¥ng th·ªÉ thanh to√°n"
                };
            }

            console.log("üîç S·∫£n ph·∫©m trong gi·ªè h√†ng:", cartItems);

            // 2Ô∏è‚É£ Ki·ªÉm tra t·ªìn kho
            for (const item of cartItems) {
                if (item.stock < item.order_quantity) {
                    throw {
                        code: 400,
                        status: "BAD_REQUEST",
                        message: `S·∫£n ph·∫©m ${item.name} kh√¥ng ƒë·ªß h√†ng trong kho`
                    };
                }
            }

            console.log("‚úÖ T·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªß h√†ng");

            // 3Ô∏è‚É£ T√≠nh t·ªïng gi√° tr·ªã ƒë∆°n h√†ng
            const totalPrice = parseFloat(
                cartItems.reduce((sum, item) => sum + parseFloat(item.total_price), 0).toFixed(2)
            );            

            // 4Ô∏è‚É£ T·∫°o m√£ ƒë∆°n h√†ng (serial number)
            const serialNumber = uuidv4();

            // 5Ô∏è‚É£ L∆∞u ƒë∆°n h√†ng v√†o b·∫£ng `orders`
            const orderId = uuidv4();
            await dbQuery(
                `INSERT INTO orders (order_id, serial_number, total_price, status, note, receive_name, receive_phone, receive_address, created_at, user_id) 
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, NOW(), ?)`,
                [orderId, serialNumber, totalPrice, "WAITING", request.note, request.receiveName, request.receivePhone, request.receiveAddress, user.user_id]
            );

            console.log("üìù ƒê√£ t·∫°o ƒë∆°n h√†ng:", orderId);

            // 6Ô∏è‚É£ Th√™m chi ti·∫øt ƒë∆°n h√†ng v√†o b·∫£ng `order_details`
            let orderDetailsDtos = [];
            for (const item of cartItems) {
                const orderDetailsId = uuidv4();
                await dbQuery(
                    `INSERT INTO order_details (order_details_id, name, unit_price, quantity, total_price, product_id, order_id, created_at) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, NOW())`,
                    [orderDetailsId, item.product_name, item.unit_price, item.order_quantity, item.total_price, item.product_id, orderId]
                );                

                // Gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong kho
                await dbQuery(
                    `UPDATE products SET stock = stock - ? WHERE product_id = ?`,
                    [item.order_quantity, item.product_id]
                );

                // Th√™m chi ti·∫øt ƒë∆°n h√†ng v√†o danh s√°ch ph·∫£n h·ªìi
                orderDetailsDtos.push({
                    product_name: item.product_name,
                    quantity: item.order_quantity,
                    unit_price: item.unit_price,
                    total_price: item.total_price
                });

            }

            console.log("üì¶ ƒê√£ th√™m chi ti·∫øt ƒë∆°n h√†ng");

            // 7Ô∏è‚É£ X√≥a gi·ªè h√†ng
            await dbQuery(`DELETE FROM shopping_cart WHERE user_id = ?`, [user.user_id]);
            console.log("üóëÔ∏è ƒê√£ x√≥a gi·ªè h√†ng");

            // 8Ô∏è‚É£ T·∫°o ph·∫£n h·ªìi ƒë∆°n h√†ng
            return {
                code: 201,
                status: "CREATED",
                message: "ƒê·∫∑t h√†ng th√†nh c√¥ng",
                data: {
                    serial_number: serialNumber,
                    total_price: totalPrice,
                    status: "WAITING",
                    note: request.note,
                    receive_name: request.receiveName,
                    receive_phone: request.receivePhone,
                    receive_address: request.receiveAddress,
                    order_details: orderDetailsDtos
                }
            };
        } catch (error) {
            console.error("‚ùå L·ªói khi ƒë·∫∑t h√†ng:", error);
            throw {
                code: error.code || 500,
                status: error.status || "SERVER_ERROR",
                message: error.message || "L·ªói Server"
            };
        }
    }
}

export default new ShoppingCartService();